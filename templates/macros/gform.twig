{# Helpers ----------------------------------------------------------------- #}

{# Wrapper around the entire field including label and decription #}
{% macro field_wrapper_classes(field) %}
  gfield
  field_sublabel_{{field.subLabelPlacement}}
  field_description_{{field.descriptionPlacement}}
  gfield_visibility_{{field.visibility}}
  {{field.type == 'honeypot' ? 'hide'}}
  {{field.isRequired ? 'gfield_contains_required'}}
  {{field.visibility == 'hidden' ? 'hide'}}
{% endmacro %}

{# Field label #}
{% macro field_label_classes(field) %}
  gfield_label
  {{field.labelPlacement == 'hidden_label' ? 'hide'}}
  {{field.failed_validation ? 'is-invalid-label'}}
{% endmacro %}

{# Container around the field input #}
{% macro field_container_classes(field) %}
  ginput_container
  ginput_container_{{field.type}}
{% endmacro %}

{# Container around all fields #}
{% macro fields_wrapper_classes(form) %}
  gform_fields
  {{form.labelPlacement}}
  form_sublabel_{{form.subLabelPlacement}}
  description_{{form.descriptionPlacement}}
{% endmacro %}

{% macro form_attributes(form) %}
  method='post'
  enctype='multipart/form-data'
  {{form.ajax ? "target='gform_ajax_frame_"~form.id~"'"}}
  id='gform_{{form.id}}'
  action='{{form.action}}{{form.ajax ? '#_gf'~form.id}}'
  {# Support wp-genero-analytics #}
  {{form.analytics_category ? "data-genero-analytics data-category='"~form.analytics_category~"'"}}
  {{form.analytics_label ? "data-label='"~form.analytics_label~"'"}}
{% endmacro %}

{# Generate an input ID used in labels #}
{% macro input_id(field) %}input_{{field.formId}}_{{field.id}}{% endmacro %}
{# Generate an input name #}
{% macro input_name(field) %}input_{{field.id}}{% endmacro %}
{# Field wrapper id #}
{% macro field_id(field) %}field_{{field.formId}}_{{field.id}}{% endmacro %}

{# Generate default field attributes #}
{% macro input_basics(field, extra_classes) %}
  {% import _self as gform %}
  id='{{gform.input_id(field)}}'
  name='{{gform.input_name(field)}}'
  value='{{field.defaultValue}}'
  class='{{field.size}} {{field.visibility}} {{extra_classes}} {{field.failed_validation ? 'is-invalid-input'}}'
  {{field.placeholder ? "placeholder='"~field.placeholder~"'"}}
  {{field.isRequired ? 'required'}}
  {{field.rangeMin or field.rangeMin == 0 ? "min='"~field.rangeMin~"'"}}
  {{field.rangeMax or field.rangeMax == 0 ? "max='"~field.rangeMax~"'"}}
  {{field.maxLength ? "maxlength='"~field.maxLength~"'"}}
{% endmacro %}

{# The form elements ------------------------------------------------------- #}

{# todo other types #}
{% macro date(field) %}
  {% from _self import input_basics %}
  <input type='text' {{input_basics(field, 'datepicker mdy datepicker_'~field.calendarIconType)}} />
{% endmacro %}

{% macro honeypot(field) %}
  {% from _self import input_basics %}
  <input type='text' {{input_basics(field)}} autocomplete='off' />
{% endmacro %}

{% macro section(field) %}
  <h3>{{field.label}}</h3>
{% endmacro %}

{% macro textarea(field) %}
  {% from _self import input_basics %}
  <textarea {{input_basics(field, 'textarea')}}>{{field.defaultValue}}</textarea>
{% endmacro %}

{# todo required #}
{% macro radio(field) %}
  {% import _self as gform %}
  <fieldset>
    <ul class="no-bullet">
      {% for choice in field.choices %}
        <li class="gchoice_{{field.formId}}_{{field.id}}_{{loop.index}} {{choice.isOtherChoice ? 'gchoice_other'}}">
          <input
            type='{{field.type}}'
            name='{{gform.input_name(field)}}'
            id='{{gform.input_id(field)}}_{{loop.index}}'
            class='{{field.failed_validation ? 'is-invalid-input'}}'
            value='{{choice.value}}'
            {{choice.isSelected ? ' checked'}}
            {{choice.isOtherChoice ? ' data-gform-other-choice="input_'~field.formId~'_'~field.id~'_other"' }}
          >
          <label
            for="{{gform.input_id(field)}}_{{loop.index}}"
            id="label_{{field.formId}}_{{field.id}}_{{loop.index}}"
            class='{{field.failed_validation ? 'is-invalid-label'}}'
          >{{choice.text}}</label>
          {% if choice.isOtherChoice %}
            {% set value = field.choices|pluck('text')|last %}
            <input
              id='{{gform.input_id(field)}}_other'
              name='{{gform.input_name(field)}}_other'
              class='gchoice_other_field'
              type='text'
              value='{{field.value}}'
              placeholder='{{value}}'
              aria-label='{{value}}'
              data-gform-other-field
            />
          {% endif %}
        </li>
      {% endfor %}
    </ul>
  </fieldset>
{% endmacro %}

{# todo required #}
{% macro checkbox(field) %}
  {% import _self as gform %}
  <fieldset>
    <ul class="no-bullet">
      {% for choice in field.choices %}
        <li class="gchoice_{{field.formId}}_{{field.id}}__{{loop.index}}">
          <input
            type='{{field.type}}'
            name='input_{{field.inputs[loop.index-1].id}}'
            id='{{gform.input_id(field)}}_{{loop.index}}'
            class='{{field.failed_validation ? 'is-invalid-input'}}'
            value='{{choice.value}}'
            {{choice.isSelected ? ' checked'}}
          >
          <label
            for="{{gform.input_id(field)}}_{{loop.index}}"
            id="label_{{field.formId}}_{{field.id}}_{{loop.index}}"
            class='{{field.failed_validation ? 'is-invalid-label'}}'
          >{{choice.text}}</label>
        </li>
      {% endfor %}
    </ul>
  </fieldset>
{% endmacro %}

{% macro multiselect(field) %}
  {% from _self import input_basics %}
  <select multiple='multiple' {{input_basics(field)}}>
    {% for choice in field.choices %}
      <option value='{{choice.value}}'{{choice.isSelected ? ' selected'}}>{{choice.text}}</option>
    {% endfor %}
  </select>
{% endmacro %}

{% macro select(field) %}
  {% from _self import input_basics %}
  <select {{input_basics(field)}}>
    {% for choice in field.choices %}
      <option value='{{choice.value}}'{{choice.isSelected ? ' selected'}}>{{choice.text}}</option>
    {% endfor %}
  </select>
{% endmacro %}

{% macro text(field) %}
  {% from _self import input_basics %}
  {%
    set type = field.enablePasswordInput ?  'password' :
      (field.type == 'phone' ? 'tel' :
      (field.type == 'website' ? 'url' :
      field.type))
  %}
  <input type='{{type}}' {{input_basics(field)}} />
{% endmacro %}

{% macro fileupload(field) %}
  {% from _self import input_basics %}
  <input type='hidden' name='MAX_FILE_SIZE' value='33554432' />
  <input type='file' {{input_basics(field)}} onchange='javascript:gformValidateFileSize(this, 33554432);' />
  <div class='validation_message'></div>
{% endmacro %}

{% macro submit(form) %}
  <input
    type='submit'
    id='gform_submit_button_{{form.id}}'
    class='gform_button button button--primary'
    value='{{form.button.text}}'>
{% endmacro %}
